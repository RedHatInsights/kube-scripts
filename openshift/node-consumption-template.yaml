apiVersion: v1
kind: Template
metadata:
  name: node-consumption-template
parameters:
- name: REGISTRY_IMG
  required: true
- name: CHANNEL
  value: staging
- name: IMAGE_TAG
  value: latest
objects:
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: node-consumption
    name: node-consumption
  spec:
    selector:
      app: node-consumption
      deploymentconfig: node-consumption
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: node-consumption
          deploymentconfig: node-consumption
      spec:
        containers:
        - env:
          - name: APP_SCRIPT
            value: oclogs.py
          - name: OCLOGS_API
            value: openshift.default.svc.cluster.local
          - name: OCLOGS_TOKEN
            value: /var/run/secrets/kubernetes.io/serviceaccount/token
          - name: OCLOGS_COLOR
            value: "false"
          - name: OCLOGS_CA_STORE
            value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - name: CW_AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: CW_AWS_ACCESS_KEY_ID
                name: cloudwatch
          - name: CW_AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: CW_AWS_SECRET_ACCESS_KEY
                name: cloudwatch
          image: ${REGISTRY_IMG}:${IMAGE_TAG}
          imagePullPolicy: Always
          name: node-consumption
          ports:
          - containerPort: 8000
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 250Mi
            requests:
              cpu: 10m
              memory: 250Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
